Aim: Developing 2D Game-Snake

# importing the necessary modules
import pygame  # importing the pygame module
import time  # importing the time module
import random  # importing the random module

# defining the speed of the snake
snake_speed = 15

# defining the size of the window
SCREEN_WIDTH = 700
SCREEN_HEIGHT = 460

# defining the colors
midnight_blue = pygame.Color(25, 25, 112)
mint_cream = pygame.Color(245, 255, 250)
crimson_red = pygame.Color(220, 20, 60)
lawn_green = pygame.Color(124, 252, 0)
orange_red = pygame.Color(255, 69, 0)

# initializing the pygame window using the pygame.init() function
pygame.init()

# using the set_mode() function of the pygame.display module to set the size of the screen
display_screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

# setting the title of the application using the set_caption() function
pygame.display.set_caption('SNAKE - JAVATPOINT')

# creating an object of the Clock class of the pygame.time module
game_clock = pygame.time.Clock()

# defining the default position of the snake
position_of_snake = [100, 50]

# defining the first four blocks of snake body
body_of_snake = [
    [100, 50],
    [90, 50],
    [80, 50],
    [70, 50]
]

# position of the fruit
position_of_fruit = [
    random.randrange(1, (SCREEN_WIDTH // 10)) * 10,
    random.randrange(1, (SCREEN_HEIGHT // 10)) * 10
]

spawning_of_fruit = True

# setting the default direction of the snake towards RIGHT
initial_direction = 'RIGHT'
snake_direction = initial_direction

# initial score
player_score = 0

# defining the functions

# function to display the score
def display_score(selection, font_color, font_style, font_size):
    # creating the font object
    score_font_style = pygame.font.SysFont(font_style, font_size)
    # creating the display surface object
    score_surface = score_font_style.render("Your Score: " + str(player_score), True, font_color)
    # creating a rectangular object for the text placement
    score_rectangle = score_surface.get_rect()
    # displaying the text
    display_screen.blit(score_surface, score_rectangle)


# function to end the game
def game_over():
    # creating the font object
    game_over_font_style = pygame.font.SysFont('times new roman', 50)
    # creating the display surface object
    game_over_surface = game_over_font_style.render('Your Score is: ' + str(player_score), True, crimson_red)
    # creating a rectangular object for the text placement
    game_over_rectangle = game_over_surface.get_rect()
    # setting the position of the text
    game_over_rectangle.midtop = (SCREEN_WIDTH / 2, SCREEN_HEIGHT / 4)
    # displaying the text on the screen
    display_screen.blit(game_over_surface, game_over_rectangle)
    # updating the screen
    pygame.display.flip()
    # suspending the execution for 2 seconds
    time.sleep(2)
    # quitting the game
    pygame.quit()
    quit()


# game loop
game_run = True

while game_run:
    # iterating through the events in the pygame.event module
    for event in pygame.event.get():
        # handling quitting the game
        if event.type == pygame.QUIT:
            game_run = False

        # handling the snake direction with keyboard keys
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP and snake_direction != 'DOWN':
                snake_direction = 'UP'
            elif event.key == pygame.K_DOWN and snake_direction != 'UP':
                snake_direction = 'DOWN'
            elif event.key == pygame.K_LEFT and snake_direction != 'RIGHT':
                snake_direction = 'LEFT'
            elif event.key == pygame.K_RIGHT and snake_direction != 'LEFT':
                snake_direction = 'RIGHT'

    # updating the position of the snake for every direction
    if snake_direction == 'UP':
        position_of_snake[1] -= 10
    if snake_direction == 'DOWN':
        position_of_snake[1] += 10
    if snake_direction == 'LEFT':
        position_of_snake[0] -= 10
    if snake_direction == 'RIGHT':
        position_of_snake[0] += 10

    # updating the body of the snake
    body_of_snake.insert(0, list(position_of_snake))

    # checking if the snake ate the fruit
    if position_of_snake[0] == position_of_fruit[0] and position_of_snake[1] == position_of_fruit[1]:
        player_score += 1
        spawning_of_fruit = False
    else:
        body_of_snake.pop()

    # randomly spawning the fruit
    if not spawning_of_fruit:
        position_of_fruit = [
            random.randrange(1, (SCREEN_WIDTH // 10)) * 10,
            random.randrange(1, (SCREEN_HEIGHT // 10)) * 10
        ]
        spawning_of_fruit = True

    # filling the screen with the background color
    display_screen.fill(mint_cream)

    # drawing the snake
    for position in body_of_snake:
        pygame.draw.rect(display_screen, lawn_green, pygame.Rect(position[0], position[1], 10, 10))

    # drawing the fruit
    pygame.draw.rect(display_screen, orange_red, pygame.Rect(position_of_fruit[0], position_of_fruit[1], 10, 10))

    # checking for game over conditions
    if position_of_snake[0] < 0 or position_of_snake[0] > SCREEN_WIDTH - 10:
        game_over()
    if position_of_snake[1] < 0 or position_of_snake[1] > SCREEN_HEIGHT - 10:
        game_over()

    # updating the screen
    pygame.display.update()

    # setting the speed of the game
    game_clock.tick(snake_speed)
